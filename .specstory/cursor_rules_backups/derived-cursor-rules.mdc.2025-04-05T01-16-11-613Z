
## PROJECT OVERVIEW
This project is a WordPress website, confirmed by the directory structure (specifically `app/public/wp-admin`, `app/public/wp-content`, `app/public/wp-includes`) and the presence of a database dump (`app/sql/local.sql`). The project uses a Local by Flywheel or Local WP directory structure, a common local WordPress development environment.  Files `.wpe-pull-ignore` and `.wpe-push-ignore` suggest potential deployment to WP Engine hosting.  No `package.json` was found, indicating it is not a Node.js based project. The `conf` directory contains configuration files for MySQL, Nginx, and PHP.  The `wp-content` directory contains: `mu-plugins`, `plugins`, `themes`, `uploads`, `upgrade`, `upgrade-temp-backup`.  Plugins include: Advanced Custom Fields Pro, Autoupdater, Custom Typekit Fonts, Elementor, Elementor Pro, Gravity Forms, Gravity Forms Stripe, Insert Headers and Footers, Safe SVG, Simple History, and WP Mail SMTP. The primary theme is Hello Elementor, with a child theme containing custom CSS and a modified Elementor button type.  The child theme includes a `custom.css` file (7.6KB) and adds an "Inverted" button type to Elementor.  The `mu-plugins` directory is currently empty. The project utilizes a CSS variable system defined in `app/public/wp-content/themes/hello-elementor-child/css/variables.css` and base styles in `app/public/wp-content/themes/hello-elementor-child/css/base-styles.css`. A style guide is located at `app/public/wp-content/themes/hello-elementor-child/style-guide.md`.  The project uses a standard WordPress development approach with Elementor as the primary builder. There are minimal custom template files in the child theme, suggesting most customizations are done through Elementor, custom CSS, and the functionality provided by the plugins.  The project structure also includes a `.specstory` directory and a `logs` directory.  The project does not utilize Next.js, Supabase, or TypeScript.  The project aims to emulate the visual style of Gucci.com, using a primarily black and white color palette with Futura PT font. The project uses a CSS variable system for managing styles.  The project utilizes a CSS variable system for managing styles. A formalized typographic scale, based on a perfect fourth ratio (1.333), has been implemented using CSS variables for consistent sizing across headings and body text. See `css/variables.css` and `base-styles.css` for implementation.  The project utilizes Local as a development environment and may be deployed to WP Engine.  Three PHP scripts (`reset-elementor.php`, `reset-customizer.php`, `reset-styles.php`) have been added to the root directory to reset Elementor and Customizer styles to defaults.  The project now utilizes Node.js v23.5.0 and the 21st.dev Magic MCP via the Cursor CLI client and Cline (VSCode client).  An existing `mcp.json` file was found in the `~/.cursor` directory.  The 21st.dev Magic MCP offers AI-powered UI component generation, access to a modern component library, TypeScript support, SVGL integration, and real-time component previews. Installation was performed using `npx @21st-dev/cli@latest install cursor --api-key YOUR_API_KEY`.  Manual configuration is also possible by adding the `@21st-dev/magic` entry to `~/.cursor/mcp.json`.  The 21st.dev Magic MCP was installed using `npx -y @21st-dev/cli@latest install cursor --api-key "6d90816cccc0974441707ac4a773c45da21d71d0c7c6043eb2fb8a1fd34ec74b"`.  To use Magic MCP, type `/ui` in the AI chat followed by a component description.  For example: `/ui create a modern navigation bar with responsive design`.  The Firecrawl MCP was installed, requiring the `FIRECRAWL_API_KEY` environment variable. The Firecrawl MCP was installed using `npx -y firecrawl-mcp@latest FIRECRAWL_API_KEY="fc-88458342d2474827a53fcd5ede0c17f1"`.  The project was initialized at the root level, encompassing the entire WordPress installation.  Best practices for managing a WordPress project in Git, especially with a WP Engine deployment, are documented in the `mbnyc` repository's README.md.  A process for migrating the local Git repository to a different directory (containing a LocalWP instance) has been documented.  The migration process involves updating the local repository to match the latest dev branch and WP Engine instance (`mbnycd.wpenginepowered.com`). The target directory for the migration is `/users/mlovascio/local sites/mbnycfitness` and `/users/mlovascio/Local Sites/mbnycfitness`. The local repository has been synchronized with the `dev` branch and the WP Engine instance (`mbnycd.wpenginepowered.com`). The primary local development environment is now located at `/users/mlovascio/Local Sites/mbnycfitness`.  The local development environment has been successfully synced with the GitHub `dev` branch and the WP Engine instance.  A comprehensive testing strategy is needed.  The child theme's directory structure includes `assets/css/variables.css`, `custom.css`, `functions.php`, `style.css`, `README.md`, and a `css` directory.  AI-specific documentation has been added to the repo to apply progressive disclosure principles to manage longer conversations. The project uses a feature branch workflow for managing changes.  The project's theme utilizes a well-organized CSS structure with base styles, component styles, and utility classes.  The CSS utilizes CSS variables defined in `variables.css` and foundational typography and colors are set.  Responsive base font sizing is implemented.  Consistent heading styles, clean hover states for links, modern button styling with transitions, responsive max-width layout via containers, and a simple grid system using CSS Grid are also implemented.  Utility classes for text alignment, margin, and padding are used with consistent spacing variables. The project uses a feature branch workflow for managing changes.  Documentation of progress and updates within feature branches is required, with frequent commits and meaningful commit messages.  The project utilizes a robust deployment process to WP Engine, leveraging GitHub Actions workflows (`wpe-deploy-dev.yml`, `wpe-deploy-staging.yml`, `wpe-deploy-production.yml`).  A full audit of the child theme's CSS files and comparison with the README.md documentation is required to ensure consistency and accuracy.  The documentation should be updated to reflect the findings of the audit.  The audit revealed duplicate CSS files in `/css/` and `/assets/css/` directories.  The `/css/` directory is used in production, while `/assets/css/` is not actively used.  It is recommended to remove or consolidate the duplicate files to avoid confusion.


## CODE STYLE
(No information provided in the AI interaction to update this section)


## FOLDER ORGANIZATION
The project follows a standard WordPress structure, consistent with Local by Flywheel or Local WP:
- `app/public`: Contains the main WordPress installation files.
    - `wp-admin`: WordPress administration area.
    - `wp-content`: Contains themes, plugins, and uploads.  Themes include Hello Elementor and a child theme. Plugins include: Advanced Custom Fields Pro, Autoupdater, Custom Typekit Fonts, Elementor, Elementor Pro, Gravity Forms, Gravity Forms Stripe, Insert Headers and Footers, Safe SVG, Simple History, and WP Mail SMTP.  A `css` subdirectory contains `variables.css` and `base-styles.css`. A `style-guide.md` file provides documentation for styling.  A `.logs` directory is also present.
    - `wp-includes`: WordPress core files.
- `app/sql`: Contains the database SQL dump (`local.sql`).
- `conf`: Contains configuration files for the project's infrastructure (MySQL, Nginx, and PHP).
- `/users/mlovascio/local sites/mbnycfitness`: This directory now contains the primary LocalWP instance.
- `/users/mlovascio/Local Sites/mbnycfitness`: This directory also contains the primary LocalWP instance.

## TECH STACK
- PHP
- MySQL
- Nginx
- WordPress
- Elementor
- Elementor Pro
- Advanced Custom Fields Pro
- Gravity Forms
- Gravity Forms Stripe
- WP Mail SMTP
- Safe SVG
- Custom Typekit Fonts
- Insert Headers and Footers
- Simple History
- Autoupdater
- WP-CLI (installed via curl)
- Node.js v23.5.0
- 21st.dev Magic MCP (Cursor CLI client)
- Cline (Cursor CLI client for VSCode)
- Firecrawl MCP


## PROJECT-SPECIFIC STANDARDS
- **CSS Styling Hierarchy:** First-level styling should originate from CSS (or theme.json) to establish base styles.  These base styles can be overridden by custom CSS in the WordPress Customizer or by styling added via Elementor.  First-level styles should be visible in Elementor's editor and on the published page.
- **Base Styles Location:** Base styles should be defined in dedicated CSS files (`css/variables.css` and `css/base-styles.css` within the child theme) and enqueued using WordPress functions.  This allows for a code-based approach to defining base styles, ensuring visibility in Elementor's editor and on the published page.
- **Base Styles Enqueueing:** To ensure base styles are visible in the Elementor editor, use `add_action('elementor/editor/before_enqueue_scripts', 'enqueue_base_styles');`  This enqueues the styles within the Elementor editor context.  The `enqueue_css_variables` function ensures that `variables.css` is loaded before `base-styles.css` and other stylesheets.
- **CSS Variable System**: The theme uses a CSS variable system defined in `app/public/wp-content/themes/hello-elementor-child/css/variables.css`.  A style guide documenting the variables and their usage is located at `app/public/wp-content/themes/hello-elementor-child/style-guide.md`.
- **Style Guide Location:** A style guide is located at `app/public/wp-content/themes/hello-elementor-child/style-guide.md`. This guide details the CSS variable system and how to use it within Elementor and custom CSS.
- **Enqueueing Priority:** To ensure base styles load before Elementor styles, use `add_action('wp_enqueue_scripts', 'enqueue_css_variables', 5);`  This ensures a priority of 5, loading earlier than other scripts.
- **Gucci Style Emulation:** The site's styling should emulate the look and feel of Gucci.com, using primarily black and white colors, Futura PT font, and dark/light mode classes.
- **Font Scale:** A formalized typographic scale, based on a perfect fourth ratio (1.333), has been implemented using CSS variables for consistent sizing across headings and body text.  See `css/variables.css` and `base-styles.css` for implementation.
- **Theme System:** A light and dark theme system is implemented using `theme-light` and `theme-dark` classes.  Text inversion is handled with the `text-inverted` class.
- **Duplicate CSS Files:**  The audit revealed duplicate CSS files in `/css/` and `/assets/css/` directories. Only the `/css/` directory should be used.  Consolidate or remove duplicate files.


## WORKFLOW & RELEASE RULES
- Utilize Git for version control.  The project should be initialized at the root level to include all WordPress files and directories.
- Commit frequently with meaningful commit messages.
- Use a branching strategy (e.g., Gitflow) to manage features and releases.
- Regularly push changes to a private GitHub repository (RealFlyPilot/mbnyc).
- Implement a robust deployment process to WP Engine, considering the use of `.wpe-pull-ignore` and `.wpe-push-ignore` files.
- Document the deployment process in the project's README.md file.
- Migrate the local Git repository to a different directory (containing a LocalWP instance) as needed.  The target directory is `/users/mlovascio/local sites/mbnycfitness` and `/users/mlovascio/Local Sites/mbnycfitness`. The migration process involves updating the local repository to match the latest dev branch and WP Engine instance (`mbnycd.wpenginepowered.com`). The next step involves synchronizing the local instance with the files from GitHub to ensure the local development environment matches the `dev` branch and the WP Engine instance.  The local development environment is now synced with the GitHub `dev` branch and the WP Engine instance.
- **Synchronization with GitHub:** Regularly synchronize the local LocalWP instance (`/users/mlovascio/Local Sites/mbnycfitness`) with the GitHub `dev` branch to ensure consistency.
- **AI Interaction Management:**  AI-specific documentation has been added to the repo to apply progressive disclosure principles to manage longer conversations.
- **Feature Branch Workflow:** Utilize feature branches for managing changes and updates.  Documentation of progress and updates within feature branches is required, with frequent commits and meaningful commit messages.  All changes should be documented and added to a feature branch before merging into the `dev` branch.
- **Deployment Workflow:** The project utilizes a robust deployment process to WP Engine, leveraging GitHub Actions workflows (`wpe-deploy-dev.yml`, `wpe-deploy-staging.yml`, `wpe-deploy-production.yml`).
- **Child Theme Documentation:**  Comprehensive documentation of the child theme's CSS files, including `variables.css`, `base-styles.css`, and `custom.css`, is required.  This documentation should be added to the `README.md` file within the child theme directory.  The documentation should be formatted using progressive disclosure to facilitate onboarding for new AI agents.  The documentation should include a comparison between the actual files and the information present in the original `README.md` file.  The documentation should include details about the file structure issues discovered during the audit, specifically the presence of duplicate CSS files in the `/css` and `/assets/css` directories. The `/assets/css` directory is not actively used and should be consolidated or removed.


## REFERENCE EXAMPLES
- `app/public/wp-content/themes/hello-elementor-child/style-guide.md`
- `app/public/wp-content/themes/hello-elementor-child/css/variables.css`
- `app/public/wp-content/themes/hello-elementor-child/css/base-styles.css`
- `app/public/reset-elementor.php`
- `app/public/reset-customizer.php`
- `app/public/reset-styles.php`
- `~/.cursor/mcp.json`
- `~/.cline/mcp_config.json`
- RealFlyPilot/mbnyc README.md
- `.github/workflows/wpe-deploy-dev.yml`
- `.github/workflows/wpe-deploy-staging.yml`
- `.github/workflows/wpe-deploy-production.yml`


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- `app/public/wp-content/themes/hello-elementor-child/style-guide.md`
- `app/public/wp-content/themes/hello-elementor-child/css/variables.css`
- `app/public/wp-content/themes/hello-elementor-child/css/base-styles.css`
- `~/.cursor/mcp.json`
- `~/.cline/mcp_config.json`
- RealFlyPilot/mbnyc README.md
- AI Interaction Management Documentation (Added to the repo)
- Child Theme Audit Documentation (Added to the child theme's README.md)


## DEBUGGING
(No information provided in the AI interaction to update this section)


## FINAL DOs AND DON'Ts
(No information provided in the AI interaction to update this section)