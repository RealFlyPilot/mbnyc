
## PROJECT OVERVIEW
This project is a WordPress website, confirmed by the directory structure (specifically `app/public/wp-admin`, `app/public/wp-content`, `app/public/wp-includes`) and the presence of a database dump (`app/sql/local.sql`). The project uses a Local by Flywheel or Local WP directory structure, a common local WordPress development environment.  Files `.wpe-pull-ignore` and `.wpe-push-ignore` suggest potential deployment to WP Engine hosting.  No `package.json` was found, indicating it is not a Node.js based project. The `conf` directory contains configuration files for MySQL, Nginx, and PHP.  The `wp-content` directory contains: `mu-plugins`, `plugins`, `themes`, `uploads`, `upgrade`, `upgrade-temp-backup`.  Plugins include: Advanced Custom Fields Pro, Autoupdater, Custom Typekit Fonts, Elementor, Elementor Pro, Gravity Forms, Gravity Forms Stripe, Insert Headers and Footers, Safe SVG, Simple History, and WP Mail SMTP. The primary theme is Hello Elementor, with a child theme containing custom CSS and a modified Elementor button type.  The child theme includes a `custom.css` file (7.6KB) and adds an "Inverted" button type to Elementor.  The `mu-plugins` directory is currently empty. The project utilizes a CSS variable system defined in `app/public/wp-content/themes/hello-elementor-child/css/variables.css` and base styles in `app/public/wp-content/themes/hello-elementor-child/css/base-styles.css`. A style guide is located at `app/public/wp-content/themes/hello-elementor-child/style-guide.md`.  The project uses a standard WordPress development approach with Elementor as the primary builder. There are minimal custom template files in the child theme, suggesting most customizations are done through Elementor, custom CSS, and the functionality provided by the plugins.  The project structure also includes a `.specstory` directory and a `logs` directory.  The project does not utilize Next.js, Supabase, or TypeScript.  The project aims to emulate the visual style of Gucci.com, using a primarily black and white color palette with Futura PT font. The project uses a CSS variable system for managing styles.  The project utilizes a CSS variable system for managing styles. A formalized typographic scale, based on a perfect fourth ratio (1.333), has been implemented using CSS variables for consistent sizing across headings and body text. See `css/variables.css` and `css/base-styles.css` for implementation.  The project utilizes Local as a development environment and may be deployed to WP Engine.  Three PHP scripts (`reset-elementor.php`, `reset-customizer.php`, `reset-styles.php`) have been added to the root directory to reset Elementor and Customizer styles to defaults.  The project now utilizes Node.js v23.5.0 and the 21st.dev Magic MCP via the Cursor CLI client.  An existing `mcp.json` file was found in the `~/.cursor` directory.

## CODE STYLE
(No information provided in the AI interaction to update this section)


## FOLDER ORGANIZATION
The project follows a standard WordPress structure, consistent with Local by Flywheel or Local WP:
- `app/public`: Contains the main WordPress installation files.
    - `wp-admin`: WordPress administration area.
    - `wp-content`: Contains themes, plugins, and uploads.  Themes include Hello Elementor and a child theme. Plugins include: Advanced Custom Fields Pro, Autoupdater, Custom Typekit Fonts, Elementor, Elementor Pro, Gravity Forms, Gravity Forms Stripe, Insert Headers and Footers, Safe SVG, Simple History, and WP Mail SMTP.  A `css` subdirectory contains `variables.css` and `base-styles.css`. A `style-guide.md` file provides documentation for styling.  A `.logs` directory is also present.
    - `wp-includes`: WordPress core files.
- `app/sql`: Contains the database SQL dump (`local.sql`).
- `conf`: Contains configuration files for the project's infrastructure (MySQL, Nginx, and PHP).


## TECH STACK
- PHP
- MySQL
- Nginx
- WordPress
- Elementor
- Elementor Pro
- Advanced Custom Fields Pro
- Gravity Forms
- Gravity Forms Stripe
- WP Mail SMTP
- Safe SVG
- Custom Typekit Fonts
- Insert Headers and Footers
- Simple History
- Autoupdater
- WP-CLI (installed via curl)
- Node.js v23.5.0
- 21st.dev Magic MCP (Cursor CLI client)


## PROJECT-SPECIFIC STANDARDS
- **CSS Styling Hierarchy:** First-level styling should originate from CSS (or theme.json) to establish base styles.  These base styles can be overridden by custom CSS in the WordPress Customizer or by styling added via Elementor.  First-level styles should be visible in Elementor's editor and on the published page.
- **Base Styles Location:** Base styles should be defined in dedicated CSS files (`css/variables.css` and `css/base-styles.css` within the child theme) and enqueued using WordPress functions.  This allows for a code-based approach to defining base styles, ensuring visibility in Elementor's editor and on the published page.
- **Base Styles Enqueueing:** To ensure base styles are visible in the Elementor editor, use `add_action('elementor/editor/before_enqueue_scripts', 'enqueue_base_styles');`  This enqueues the styles within the Elementor editor context.  The `enqueue_css_variables` function ensures that `variables.css` is loaded before `base-styles.css` and other stylesheets.
- **CSS Variable System**: The theme uses a CSS variable system defined in `app/public/wp-content/themes/hello-elementor-child/css/variables.css`.  A style guide documenting the variables and their usage is located at `app/public/wp-content/themes/hello-elementor-child/style-guide.md`.
- **Style Guide Location:** A style guide is located at `app/public/wp-content/themes/hello-elementor-child/style-guide.md`. This guide details the CSS variable system and how to use it within Elementor and custom CSS.
- **Enqueueing Priority:** To ensure base styles load before Elementor styles, use `add_action('wp_enqueue_scripts', 'enqueue_css_variables', 5);`  This ensures a priority of 5, loading earlier than other scripts.
- **Gucci Style Emulation:** The site's styling should emulate the look and feel of Gucci.com, using primarily black and white colors, Futura PT font, and dark/light mode classes.
- **Font Scale:** A formalized typographic scale, based on a perfect fourth ratio (1.333), has been implemented using CSS variables for consistent sizing across headings and body text.  See `css/variables.css` and `css/base-styles.css` for implementation.
- **Theme System:** A light and dark theme system is implemented using `theme-light` and `theme-dark` classes.  Text inversion is handled with the `text-inverted` class.


## WORKFLOW & RELEASE RULES
(No information provided in the AI interaction to update this section)


## REFERENCE EXAMPLES
- `app/public/wp-content/themes/hello-elementor-child/style-guide.md`
- `app/public/wp-content/themes/hello-elementor-child/css/variables.css`
- `app/public/wp-content/themes/hello-elementor-child/css/base-styles.css`
- `app/public/reset-elementor.php`
- `app/public/reset-customizer.php`
- `app/public/reset-styles.php`
- `~/.cursor/mcp.json`


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- `app/public/wp-content/themes/hello-elementor-child/style-guide.md`
- `app/public/wp-content/themes/hello-elementor-child/css/variables.css`
- `app/public/wp-content/themes/hello-elementor-child/css/base-styles.css`
- `~/.cursor/mcp.json`


## DEBUGGING
(No information provided in the AI interaction to update this section)


## FINAL DOs AND DON'Ts
(No information provided in the AI interaction to update this section)